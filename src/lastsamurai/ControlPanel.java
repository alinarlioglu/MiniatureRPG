/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lastsamurai;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Ali
 */
public class ControlPanel extends javax.swing.JPanel{
    
    //To check which health power-up is used.
    private int counter, counterTwo, counterThree;
    //Declaring a samurai wearing the sword drop variable
    private SamuraiWearSword samurai;
    //Getting and saving images to variables - placed on button and background
    private final ImageIcon BAG;
    private final ImageIcon HIDE_BAG;
    //private final Image BACKGROUND;
    //Reference to the LastSamurai and Collision instance
    LastSamurai ls;
    Collision collision;
    KeyController keyController;
    /**
     * Creates new form ControlPanel
     */
    public ControlPanel(LastSamurai ls, Collision collision, KeyController keyController) {
        initComponents();
        this.ls=ls;
        this.keyController = keyController;
        this.collision=collision;
        counter=0;
        counterTwo=0;
        
        //Obtaining the image to place on the button
        BAG = new ImageIcon("image/bag2.png");
        HIDE_BAG = new ImageIcon("image/hidebag.png");
        
        //Setting the image on the button
        jButton1.setIcon(BAG);
        jButton1.setOpaque(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setBorderPainted(false);
        jButton1.setFocusable(false);
        
        jButton2.setIcon(HIDE_BAG);
        jButton2.setOpaque(false);
        jButton2.setContentAreaFilled(false);
        jButton2.setBorderPainted(false);
        jButton2.setFocusable(false);
        
        //Table isn't displayed straight away
        Inventory.setVisible(false);
        //Makes both columns - 'Title 1' and 'Title 2' near invisible
        TableColumnModel tcm = Inventory.getColumnModel();
        tcm.removeColumn(tcm.getColumn(0));
        tcm.getColumn(0).setMaxWidth(0);
        tcm.getColumn(0).setMinWidth(0);
        
        //BACKGROUND = new ImageIcon("image/TopBar.png").getImage();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Inventory = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Inventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, ""},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jScrollPane1.setViewportView(Inventory);

        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(114, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ls.stopWorld();
        //Pick-up all three health bars first, then proceed to use them.
        //Health bar is duplicated - use health bar, then check bag and use the duplication as well, then check the bag again.
        if(collision.isHealthDestroyed==true && collision.isHealthTwoGone==true){
            String[] columnNames = {"Inventory", ""};
            Object[][] data =
            {
                {"Stone of Healing", "Use Item"},
                {"Stone of Healing", "Use Item"}
            };
            DefaultTableModel model = new DefaultTableModel(data, columnNames);
            Inventory.setModel(model);
            
            Action delete = new AbstractAction()
            {
                public void actionPerformed(ActionEvent e)
                {
                    JTable table = (JTable)e.getSource();
                    int modelRow = Integer.valueOf( e.getActionCommand() );
                    //Once the 'Use Item' button is pressed next to the 'Stone of Healing', the corresponding row is removed.
                    ((DefaultTableModel)table.getModel()).removeRow(modelRow);
                    //Adding two health points to the samurai and updating the health variables which updates the health bar.
                    ls.getKeyMovement().getSamurai().addHealth(3);
                    ls.getKeyMovement().getCollision().setNewHealth(ls.getKeyMovement().getSamurai().getHealth());
                }
            };
            
            ButtonColumn buttonColumn2 = new ButtonColumn(Inventory, delete, 1);
            buttonColumn2.setMnemonic(KeyEvent.VK_U);
            //Won't recreate the Stone of Healing once it's 'used' as the boolean variable adding the stone to the bag is now false. 
            //It won't add the stone to the bag even if I re-press the 'Bag' button due to the boolean variable changing from 'true' to 'false'.
            collision.isHealthDestroyed=false;
        }
        else if(collision.isHealthThreeGone==true && collision.isHealthTwoGone==true){
            String[] columnNames = {"Inventory", ""};
            Object[][] data =
            {
                {"Stone of Healing", "Use Item"},
                {"Stone of Healing", "Use Item"}
            };
            DefaultTableModel model = new DefaultTableModel(data, columnNames);
            Inventory.setModel(model);
            
            Action delete = new AbstractAction()
            {
                public void actionPerformed(ActionEvent e)
                {
                    JTable table = (JTable)e.getSource();
                    int modelRow = Integer.valueOf( e.getActionCommand() );
                    //Once the 'Use Item' button is pressed next to the 'Stone of Healing', the corresponding row is removed.
                    ((DefaultTableModel)table.getModel()).removeRow(modelRow);
                    //Adding two health points to the samurai and updating the health variables which updates the health bar.
                    ls.getKeyMovement().getSamurai().addHealth(3);
                    ls.getKeyMovement().getCollision().setNewHealth(ls.getKeyMovement().getSamurai().getHealth());
                    if(counterTwo==0){
                        collision.isHealthTwoGone=false;
                        ++counterTwo;
                    }
                    else {
                        collision.isHealthThreeGone=false;
                        counterTwo=0;
                    }
                }
            };
            
            ButtonColumn buttonColumn2 = new ButtonColumn(Inventory, delete, 1);
            buttonColumn2.setMnemonic(KeyEvent.VK_U);
            //Won't recreate the Stone of Healing once it's 'used' as the boolean variable adding the stone to the bag is now false. 
            //It won't add the stone to the bag even if I re-press the 'Bag' button due to the boolean variable changing from 'true' to 'false'.            
        }
        else if(collision.isHealthTwoGone==true){
            String[] columnNames = {"Inventory", ""};
            Object[][] data =
            {
                {"Stone of Healing", "Use Item"}
            };
            DefaultTableModel model = new DefaultTableModel(data, columnNames);
            Inventory.setModel(model);
            
            Action delete = new AbstractAction()
            {
                public void actionPerformed(ActionEvent e)
                {
                    JTable table = (JTable)e.getSource();
                    int modelRow = Integer.valueOf( e.getActionCommand() );
                    //Once the 'Use Item' button is pressed next to the 'Stone of Healing', the corresponding row is removed.
                    ((DefaultTableModel)table.getModel()).removeRow(modelRow);
                    //Adding two health points to the samurai and updating the health variables which updates the health bar.
                    ls.getKeyMovement().getSamurai().addHealth(3);
                    ls.getKeyMovement().getCollision().setNewHealth(ls.getKeyMovement().getSamurai().getHealth());
                }
            };
            
            ButtonColumn buttonColumn = new ButtonColumn(Inventory, delete, 1);
            buttonColumn.setMnemonic(KeyEvent.VK_D);
            //Won't recreate the Stone of Healing once it's 'used' as the boolean variable adding the stone to the bag is now false. 
            //It won't add the stone to the bag even if I re-press the 'Bag' button due to the boolean variable changing from 'true' to 'false'.
            collision.isHealthTwoGone=false;
        }
        else if(collision.isHealthThreeGone==true){
            String[] columnNames = {"Inventory", ""};
            Object[][] data =
            {
                {"Stone of Healing", "Use Item"}
            };
            DefaultTableModel model = new DefaultTableModel(data, columnNames);
            Inventory.setModel(model);
            
            Action delete = new AbstractAction()
            {
                public void actionPerformed(ActionEvent e)
                {
                    JTable table = (JTable)e.getSource();
                    int modelRow = Integer.valueOf( e.getActionCommand() );
                    //Once the 'Use Item' button is pressed next to the 'Stone of Healing', the corresponding row is removed.
                    ((DefaultTableModel)table.getModel()).removeRow(modelRow);
                    //Adding two health points to the samurai and updating the health variables which updates the health bar.
                    ls.getKeyMovement().getSamurai().addHealth(3);
                    ls.getKeyMovement().getCollision().setNewHealth(ls.getKeyMovement().getSamurai().getHealth());
                    collision.isHealthThreeGone=false;
                }
            };
            
            ButtonColumn buttonColumn = new ButtonColumn(Inventory, delete, 1);
            buttonColumn.setMnemonic(KeyEvent.VK_D);
            //Won't recreate the Stone of Healing once it's 'used' as the boolean variable adding the stone to the bag is now false. 
            //It won't add the stone to the bag even if I re-press the 'Bag' button due to the boolean variable changing from 'true' to 'false'.
        }
        else if(collision.isQuestHealthGone==true){
            String[] columnNames = {"Inventory", ""};
            Object[][] data =
            {
                {"Stone of Healing", "Use Item"}
            };
            DefaultTableModel model = new DefaultTableModel(data, columnNames);
            Inventory.setModel(model);
            
            Action delete = new AbstractAction()
            {
                public void actionPerformed(ActionEvent e)
                {
                    JTable table = (JTable)e.getSource();
                    int modelRow = Integer.valueOf( e.getActionCommand() );
                    //Once the 'Use Item' button is pressed next to the 'Stone of Healing', the corresponding row is removed.
                    ((DefaultTableModel)table.getModel()).removeRow(modelRow);
                    //Adding two health points to the samurai and updating the health variables which updates the health bar.
                    if(ls.getKeyMovement().getSamurai().getHealth()<7){
                        ls.getKeyMovement().getSamurai().addHealth(4);
                        ls.getKeyMovement().getCollision().setNewHealth(ls.getKeyMovement().getSamurai().getHealth());
                    }
                    else if(ls.getKeyMovement().getSamurai().getHealth()==7){
                        ls.getKeyMovement().getSamurai().addHealth(3);
                        ls.getKeyMovement().getCollision().setNewHealth(ls.getKeyMovement().getSamurai().getHealth());
                    }
                    else if(ls.getKeyMovement().getSamurai().getHealth()==8){
                        ls.getKeyMovement().getSamurai().addHealth(2);
                        ls.getKeyMovement().getCollision().setNewHealth(ls.getKeyMovement().getSamurai().getHealth());
                    }
                    else if(ls.getKeyMovement().getSamurai().getHealth()==9){
                        ls.getKeyMovement().getSamurai().addHealth(1);
                        ls.getKeyMovement().getCollision().setNewHealth(ls.getKeyMovement().getSamurai().getHealth());
                    }
                    collision.isQuestHealthGone=false;
                }
            };
            
            ButtonColumn buttonColumn = new ButtonColumn(Inventory, delete, 1);
            buttonColumn.setMnemonic(KeyEvent.VK_D);
            //Won't recreate the Stone of Healing once it's 'used' as the boolean variable adding the stone to the bag is now false. 
            //It won't add the stone to the bag even if I re-press the 'Bag' button due to the boolean variable changing from 'true' to 'false'.
        }
        else if(collision.isHealthDestroyed==true){
            String[] columnNames = {"Inventory", ""};
            Object[][] data =
            {
                {"Stone of Healing", "Use Item"}
            };
            DefaultTableModel model = new DefaultTableModel(data, columnNames);
            Inventory.setModel(model);
            
            Action delete = new AbstractAction()
            {
                public void actionPerformed(ActionEvent e)
                {
                    JTable table = (JTable)e.getSource();
                    int modelRow = Integer.valueOf( e.getActionCommand() );
                    //Once the 'Use Item' button is pressed next to the 'Stone of Healing', the corresponding row is removed.
                    ((DefaultTableModel)table.getModel()).removeRow(modelRow);
                    //Adding two health points to the samurai and updating the health variables which updates the health bar.
                    ls.getKeyMovement().getSamurai().addHealth(3);
                    ls.getKeyMovement().getCollision().setNewHealth(ls.getKeyMovement().getSamurai().getHealth());
                    collision.isHealthDestroyed=false;
                }
            };
            
            ButtonColumn buttonColumn = new ButtonColumn(Inventory, delete, 1);
            buttonColumn.setMnemonic(KeyEvent.VK_D);
            //Won't recreate the Stone of Healing once it's 'used' as the boolean variable adding the stone to the bag is now false. 
            //It won't add the stone to the bag even if I re-press the 'Bag' button due to the boolean variable changing from 'true' to 'false'.
        } 
        else if(collision.isDropDestroyed==true && collision.isHealthDestroyed==false){
            String[] columnNames = {"Inventory", ""};
            Object[][] data =
            {
                {"Sword of Wrath", "Use Item"}
            };
            DefaultTableModel model = new DefaultTableModel(data, columnNames);
            Inventory.setModel(model);
            
            Action delete = new AbstractAction()
            {
                public void actionPerformed(ActionEvent e)
                {
                    JTable table = (JTable)e.getSource();
                    int modelRow = Integer.valueOf( e.getActionCommand() );
                    //Once the 'Use Item' button is pressed next to the 'Sword of Wrath', the corresponding row is removed and the sword is wielded by the Samurai.
                    ((DefaultTableModel)table.getModel()).removeRow(modelRow);
                    keyController.getSamurai().addSword();
                    //Making the variable true because the sword of wrath is wielded by the samurai.
                    keyController.getCollision().setIsSwordOfWrathUsed(true);
                    
                }
            };
            
            ButtonColumn buttonColumn = new ButtonColumn(Inventory, delete, 1);
            buttonColumn.setMnemonic(KeyEvent.VK_D);
        }
        else if(collision.isHealthDestroyed==true && collision.isHealthTwoGone==true && collision.isHealthThreeGone==true){
            String[] columnNames = {"Inventory", ""};
            Object[][] data =
            {
                {"Stone of Healing", "Use Item"},
                {"Stone of Healing", "Use Item"},
                {"Stone of Healing", "Use Item"}
            };
            DefaultTableModel model = new DefaultTableModel(data, columnNames);
            Inventory.setModel(model);
            
            Action delete = new AbstractAction()
            {
                public void actionPerformed(ActionEvent e)
                {
                    JTable table = (JTable)e.getSource();
                    int modelRow = Integer.valueOf( e.getActionCommand() );
                    //Once the 'Use Item' button is pressed next to the 'Stone of Healing', the corresponding row is removed.
                    ((DefaultTableModel)table.getModel()).removeRow(modelRow);
                    //Adding two health points to the samurai and updating the health variables which updates the health bar.
                    ls.getKeyMovement().getSamurai().addHealth(3);
                    ls.getKeyMovement().getCollision().setNewHealth(ls.getKeyMovement().getSamurai().getHealth());
                    switch (counter) {
                        case 0:
                            collision.isHealthDestroyed=false;
                            ++counter;
                            break;
                        case 1:
                            collision.isHealthTwoGone=false;
                            ++counter;
                            break;
                        case 2:
                            collision.isHealthThreeGone=false;
                            counter=0;
                            break;
                        default:
                            break;
                    }
                }
            };
            
            ButtonColumn buttonColumn2 = new ButtonColumn(Inventory, delete, 1);
            buttonColumn2.setMnemonic(KeyEvent.VK_U);
            //Won't recreate the Stone of Healing once it's 'used' as the boolean variable adding the stone to the bag is now false. 
            //It won't add the stone to the bag even if I re-press the 'Bag' button due to the boolean variable changing from 'true' to 'false'.            
        }
        else {
            String[] columnNames = {"Inventory", ""};
            Object[][] data =
            {
                {"", ""}
            };
            DefaultTableModel model = new DefaultTableModel(data, columnNames);
            Inventory.setModel(model);
        }
        Inventory.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Inventory.setVisible(false);
        ls.startWorld();
    }//GEN-LAST:event_jButton2ActionPerformed

    public SamuraiWearSword getSamurai() {
        return samurai;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Inventory;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
